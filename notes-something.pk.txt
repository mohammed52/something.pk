--
create a new github.com project, clone it, add all files and push
--
add mondod path to environmental variables
--
get an overview of af and place comments
--
client.jsx, routes.jsx entry points to the app
--
server folder apparently contains all the server code
--
server->db folder contains db code
--
will need to learn express.js and mondodb.js
--
server startup: index.js -> connect -> , initExpress(app)
--
In server->index:
const app = express()
--
server also has some routing mechanism, index->initRoutes , not related to react-router
app.get( and app.post( , many 
--
In server->index:
app.get('*', renderMiddleware); what is renderMiddleware ???
--
will probably need to quickly go through express.js tut - 2.5hr
--
react-router routes are also imported on the server:
index -> app.get('*', middleware)-> 
store = configureStore({...}) -> routes = createRoutes(store) ->
--
redux store is used in creating routes and used on server aswell
--
 store.replaceReducer(... : 
--
reactGo also uses code splitting
--
all redux action.types are string constants
--
may also need to go throught advanced redx tut
--
all rerouting info goes into the redux store
--
all async requests status go into the redux store
--
index->middleware->pageRenderer //a page is built on the server using the store
--
react-helmet: a document head manager for react
--
pageRenderer->renderToString
--
need to learn server side rendring for faster loading and SEO
--
Server side rendring:
https://medium.com/@firasd/quick-start-tutorial-universal-react-with-server-side-rendering-76fe5363d6e
--
react, react-dom: to create and render React components on the server
--
Routing in the app is primarily handled by Express
--
HTTP POST requests supply additional data from the client (browser) to the server in the message body
--
GET requests include all required data in the URL
--
can have same file names in different directories, index.js
--
app.use - express use middleware
--
const app = express() //create express app
--
Username and password authentication strategy for Passport and Node.js
--
react-router match() - used for server-side rendering
--
connect() called after express() is called // to connect to db
--
In server->index.js:
express();
connect(); //connect to DB and load models & schemas
initPassport();
initExpress(app);
initRoutes(app); //routes for express app, uses controllers from db, set routes that run db queries
app.get('*', renderMiddleware); //react-router routes included as renderMiddleware, 
app.listen(app.get('port')); // 
--
app.get(... , app.post(..., http get and posts 
--
connect() and loadModels() // connect to MongoDB and set Schemas
--
connect-mongo MongoDB session store for Connect and Express
--
express-session: session middleware for Express
--
render-middleware // 
--
method-override : Lets you use HTTP verbs such as PUT or DELETE in places where the client doesn't support it
--
compression - Node.js compression middleware, deflate , gzip
--
path : module provides utilities for working with file and directory paths
--
process: The process object is a global that provides information about, and control over, the current Node.js process
--
app.set(name, value): Express, Assigns setting name to value, where name is one of the properties from the app settings table.
--
app settings table: Express table, has a few settings
--
Sequelize 
A promise-based Node.js/io.js ORM for Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server. It features solid transaction support, relations, read replication and more
body-parser : Node.js body parsing middleware
--
get - all topics, 
post - add topic, 
put - update topic,
delete - delete topic
--
md5: widely used hash function producing a 128-bit hash value
--
types: constants redux action types
--
vote increments and decrements are services
--
axios: Promise based HTTP client for the browser and node.js
--
when redux actions are called, services are fired
--
client->redux actions -> make user requests
--
push -> react-router-redux, in redux action, when response received from the server dispatch(push('/')
--
in redux actions, first server service is called, then store dispatch is called if the response was ok
--
react-router-redux is used in the application
--
server side rendring
--
server->
index.js-> app.get('*', renderMiddleware);
middleware-> pageRenderer(store, props);
pageRenderer-> 
--
react-helmet : manage all of your changes to the document head
--
JSON.stringify() - converts a JavaScript value to a JSON string
--
renderToString() - Render a React element to its initial HTML. This should only be used on the server. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes
--
0300-9256138
Col Asim
55,000 door, 
20500 rack
--
6 7 lvls, 9ft h, 3ft dept - Rs. 20,500/-
--
have to study what each folder does
--
debug using react debugger in chrome
--
files don't show up as you have created them in chrome sources tab
--
createRoutes called on both client and server
--
configureStore called both client and server middleware
--
on client, for redux store: const initialState = window.__INITIAL_STATE__
--
Promise.resolve(value) method returns a Promise object , The Promise object is used for asynchronous computations. A Promise represents a value which may be available now, or in the future, or never
--
the app does not use component life cycle methods
--
something.pk->app->services->index : getTopics, deleteTopics, updateTopics, createTopics , create a clientRequest
--
something.pk->app->fetch-data->fetchVoteData->voteSetrice().getTopics() , gets all topics
this is passed in props to IndexRoute->Vote page
--
something.pk->app->reducers: update states
--
something.pk->app->store->configureStore , creates a new store with give initialState, returns the store
--
something.pk->app->utils->createRestApiClient , used in creating services,
--
something.pk->app->utils->fetchDataForRoutes , used in client->render->onUpdate->get data and update store
--
something.pk->confirg , misc constants and env variables
--
in server folder, createRoutes and confirgureStore imported from the app folder
--
the server->middleware->pageRenderer works with all app links, not just at the start
--
where is the handover part server to client?
--
client gets the store initial state via window.initialstate
--
server sets the window.initialState then send the html
--
if app is crashing, waiting for refresh , restart the MongoD
--
debugger doesnt work on server files, how to debug server code ? use console.log , node-inspector
--
if Express app is not running but Mondodb is running, can not launch Meteor app
--
jsx auto formatter auto indent:
1. Install ST3 jsfmt
2. Install esformatter-jsx in STE jsfmt plugin directory
https://github.com/royriojas/esformatter-jsx/wiki/Usage-with-jsfmt
--
jsfmt user settings:
--
{
  "extensions": [
    "js",
    "jsx",
    "sublime-settings"
  ],
  "options": {
    "plugins": [
      "esformatter-jsx",
    ],
    "jsx": {
      "formatJSX": true,
      // change these to your preferred values
      // refer to https://github.com/royriojas/esformatter-jsx#best-configuration for more options
      "attrsOnSameLineAsTag": false,
      "maxAttrsOnTag": 3,
      "firstAttributeOnSameLine": true,
      "alignWithFirstAttribute": true,
      "spaceInJSXExpressionContainers": ""
    }
  // other esformatter options
  }
}
--
have to learn how to use node-inspector with ReactGo
--
Hide ST3 buy popup: take your Plugin folder (which you can download as a zip from GitHub, for example) and simply copy the folder into your Packages directory
DOES NOT WORK!!!
https://gist.github.com/egel/b7beba6f962110596660
--
what is new topic? state.topic.newtopic
Ans: temp topic typed in input box, retrieved from the state and added to vote.props
--
pages normally add header meta info
--
cmd set - view all env variables
--
Q: mongod env variable not detected in cmd? wasted 02 hrs
Ans: do not create a new variable, add to the existing path variable
--
ctrl+l: ST3 select line
--
ctrl+click : ST3 create multiple cursors
--
alt + -> : ST3 move to next capital letter
--
case sensitive cursor move ctrl+d
http://stackoverflow.com/questions/14829336/case-sensitive-cmdd-in-sublime-text-2
--
ctrl+p : ST3 go to file
--
ctrl_l : ST3 select entire line
--
ctrl+shift+d : ST3 copy paste line
--
ST3 keybindings, list of commands:
http://www.sublimetext.com/docs/commands
--
ST3 macro: ctrl+q
http://sublimetext.info/docs/en/extensibility/macros.html
--
ST3 commands:
http://docs.sublimetext.info/en/latest/reference/commands.html
--
ST3 show_overlay command
--
ST3 plugin chain of command
--
ctrl+shift+s : ST3 save as
--
GOTO definition on ST3 mouse click - 
USE CORRECT FILE NAME Default (Windows).sublime-mousemap : wasted 02 hours
https://gist.github.com/kendellfab/6135193
--
